isolate bash process
sudo unshare --fork --pid --mount-proc bash
sudo unshare --fork --pid --net --mount-proc bash
skopeo inspect --format "{{.RepoTags}}" docker://docker.io/library/ubuntu:latest | tr ' ' '\n' | grep focal
skopeo inspect docker://docker.io/ubuntu/apache2
podman container prune | delete non-running containers
--rm | delete containers on stop
-it | interactive tty
--hostname | internal to container
-d | detach
podman container attache NAME
-exit will stop the container
-to exit ctrl+p ctrl+q

MONITORING
podman container top NAME
podman container inspect NAME
podman container logs NAME
podman container inspect --format "{{.Config.Cmd}}" | check default commant
podman containter exec -it NAME /bin/bash
podman -rm -f NAME | delete running container

SELINUX for WWW Dir
chcon -Rt container_file_t DIR

CREATE SYSTEMD FILE
podman generate systemd NAME
systemctl enable --now NAME
systemctl daemon-reload

SET BOOLEAN FOR RUNNING SYSTEMD INSIDE A CONTAINER | CONTAINER CAN MANAGE CONTROL GROUPS WHICH IS A SYSTEMD REQUIREMENT | SUCH AS FOR ANSIBLE TESTING
sudo setsebool -P container_manage_cgroup true

CREATING CONTAINER
mkdir -p ~project/fedora
ssh-keygen -f FILE -N ""
cp ~/.ssh/FILE.pub
echo "tux ALL=(root) NOPASSWD: ALL" . tux
visudo -cf 	project/fedora/tux
vim Dockerfile

FROM = docker image
RUN = execute command such as install packages
RUN = execute another command
RUN example user create = useradd -m tux -G wheel && echo 'tux:[Password1]' | chpasswd
COPY = copy file into container; example = COPY --chmod=600 tux /etc/sudoers.d/tux
EXAMPL SSH KEY = COPY --chmod=700 --chown=tux:tux KEY.pub /home/tux/.ssh/authorized_keys
EXPOSE = exopse port # through firewall; each container has its own firewall
CMD ["/usr/sbin/init"] = is symbolic link to systemd in fedora38; default executable

podman image build -t NAME .

PREVENT SSH FROM ADDING TO KNOWNHOSTS FILE TO PREVENT ERRORS WHEN CONTAINER IS RESPAWNED AND AUTO ACCEPT PUB KEY
ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -p 2222:22 tux@localhost

podman network ls
podman network create NAME --subnet SUBNET/xx --gateway GATEWAYIP
poddman container  run -d name NAME --hostname HOSTNAME -p XXXX:XX --network NAME CONTAINERIMAGE

podman system prune | delete unused containers
podman system prune -a -f | delete all unused networks containers etc 

